import * as Core from "./core.js";
import * as Errors from "./error.js";
import { type Agent } from "./_shims/index.js";
import * as Uploads from "./uploads.js";
import * as API from 'dub/resources/index';
export interface ClientOptions {
    /**
     * Defaults to process.env['DUB_API_KEY'].
     */
    token?: string | undefined;
    projectSlug?: string | null | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['DUB_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     */
    timeout?: number;
    /**
     * An HTTP agent used to manage HTTP(S) connections.
     *
     * If not provided, an agent will be constructed by default in the Node.js environment,
     * otherwise no agent is used.
     */
    httpAgent?: Agent;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is
     * defined globally.
     */
    fetch?: Core.Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `undefined` or `null` in request options.
     */
    defaultHeaders?: Core.Headers;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Core.DefaultQuery;
}
/** API Client for interfacing with the Dub API. */
export declare class Dub extends Core.APIClient {
    token: string;
    projectSlug: string | null;
    private _options;
    /**
     * API Client for interfacing with the Dub API.
     *
     * @param {string | undefined} [opts.token=process.env['DUB_API_KEY'] ?? undefined]
     * @param {string | null | undefined} [opts.projectSlug]
     * @param {string} [opts.baseURL=process.env['DUB_BASE_URL'] ?? https://api.dub.co] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, token, projectSlug, ...opts }?: ClientOptions);
    links: API.Links;
    qr: API.Qr;
    projects: API.Projects;
    protected defaultQuery(): Core.DefaultQuery | undefined;
    protected defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    protected authHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    protected stringifyQuery(query: Record<string, unknown>): string;
    static Dub: typeof Dub;
    static DubError: typeof Errors.DubError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
}
export declare const DubError: typeof Errors.DubError, APIError: typeof Errors.APIError, APIConnectionError: typeof Errors.APIConnectionError, APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError, APIUserAbortError: typeof Errors.APIUserAbortError, NotFoundError: typeof Errors.NotFoundError, ConflictError: typeof Errors.ConflictError, RateLimitError: typeof Errors.RateLimitError, BadRequestError: typeof Errors.BadRequestError, AuthenticationError: typeof Errors.AuthenticationError, InternalServerError: typeof Errors.InternalServerError, PermissionDeniedError: typeof Errors.PermissionDeniedError, UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
export import toFile = Uploads.toFile;
export import fileFromPath = Uploads.fileFromPath;
export declare namespace Dub {
    export import toFile = Uploads.toFile;
    export import fileFromPath = Uploads.fileFromPath;
    export import RequestOptions = Core.RequestOptions;
    export import Links = API.Links;
    export import LinkCreateResponse = API.LinkCreateResponse;
    export import LinkUpdateResponse = API.LinkUpdateResponse;
    export import LinkListResponse = API.LinkListResponse;
    export import LinkDeleteLinkResponse = API.LinkDeleteLinkResponse;
    export import LinkCreateParams = API.LinkCreateParams;
    export import LinkUpdateParams = API.LinkUpdateParams;
    export import LinkListParams = API.LinkListParams;
    export import LinkDeleteLinkParams = API.LinkDeleteLinkParams;
    export import Qr = API.Qr;
    export import QrRetrieveParams = API.QrRetrieveParams;
    export import Projects = API.Projects;
    export import ProjectRetrieveResponse = API.ProjectRetrieveResponse;
    export import ProjectListResponse = API.ProjectListResponse;
    export import ProjectRetrieveParams = API.ProjectRetrieveParams;
}
export default Dub;
//# sourceMappingURL=index.d.ts.map