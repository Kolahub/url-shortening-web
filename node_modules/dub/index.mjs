// File generated from our OpenAPI spec by Stainless.
var _a;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as qs from 'qs';
import * as API from 'dub/resources/index';
/** API Client for interfacing with the Dub API. */
export class Dub extends Core.APIClient {
    /**
     * API Client for interfacing with the Dub API.
     *
     * @param {string | undefined} [opts.token=process.env['DUB_API_KEY'] ?? undefined]
     * @param {string | null | undefined} [opts.projectSlug]
     * @param {string} [opts.baseURL=process.env['DUB_BASE_URL'] ?? https://api.dub.co] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('DUB_BASE_URL'), token = Core.readEnv('DUB_API_KEY'), projectSlug = null, ...opts } = {}) {
        if (token === undefined) {
            throw new Errors.DubError("The DUB_API_KEY environment variable is missing or empty; either provide it, or instantiate the Dub client with an token option, like new Dub({ token: 'My Token' }).");
        }
        const options = {
            token,
            projectSlug,
            ...opts,
            baseURL: baseURL || `https://api.dub.co`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.links = new API.Links(this);
        this.qr = new API.Qr(this);
        this.projects = new API.Projects(this);
        this._options = options;
        this.token = token;
        this.projectSlug = projectSlug;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.token}` };
    }
    stringifyQuery(query) {
        return qs.stringify(query, { arrayFormat: 'comma' });
    }
}
_a = Dub;
Dub.Dub = _a;
Dub.DubError = Errors.DubError;
Dub.APIError = Errors.APIError;
Dub.APIConnectionError = Errors.APIConnectionError;
Dub.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Dub.APIUserAbortError = Errors.APIUserAbortError;
Dub.NotFoundError = Errors.NotFoundError;
Dub.ConflictError = Errors.ConflictError;
Dub.RateLimitError = Errors.RateLimitError;
Dub.BadRequestError = Errors.BadRequestError;
Dub.AuthenticationError = Errors.AuthenticationError;
Dub.InternalServerError = Errors.InternalServerError;
Dub.PermissionDeniedError = Errors.PermissionDeniedError;
Dub.UnprocessableEntityError = Errors.UnprocessableEntityError;
export const { DubError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } = Errors;
export var toFile = Uploads.toFile;
export var fileFromPath = Uploads.fileFromPath;
(function (Dub) {
    // Helper functions
    Dub.toFile = Uploads.toFile;
    Dub.fileFromPath = Uploads.fileFromPath;
    Dub.Links = API.Links;
    Dub.Qr = API.Qr;
    Dub.Projects = API.Projects;
})(Dub || (Dub = {}));
export default Dub;
//# sourceMappingURL=index.mjs.map